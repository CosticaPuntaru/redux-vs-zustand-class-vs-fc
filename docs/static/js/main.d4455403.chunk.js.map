{"version":3,"sources":["features/counter/counter-redux/Counter.module.css","features/counter/counter-zustand/Counter.module.css","app/hooks.ts","features/counter/counter-redux-toolkit/counter.store.ts","features/counter/counter-redux-toolkit/Counter.tsx","features/counter/counter-redux/counter.store.ts","features/counter/counter-redux/Counter.tsx","features/counter/counter-zustand/counter.store.ts","features/counter/counter-zustand/Counter.tsx","features/dogs/dogs.tsx","features/mine-sweeper/minesweeper-refactored/cell.tsx","features/mine-sweeper/minesweeper-refactored/mine-sweeper.utils.ts","features/mine-sweeper/minesweeper-zustand/mine-sweeper.store.ts","features/mine-sweeper/minesweeper-refactored/board.tsx","features/mine-sweeper/minesweeper-refactored/mine-sweeper.tsx","features/mine-sweeper/minesweeper-zustand/board.tsx","features/mine-sweeper/minesweeper-zustand/mine-sweeper.tsx","features/mine-sweeper/minesweeper/cell.tsx","features/mine-sweeper/minesweeper/board.tsx","features/mine-sweeper/minesweeper/mine-sweeper.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/counter/counter-redux-toolkit/Counter.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","counterStore","createSlice","name","initialState","value","reducers","increment","state","action","payload","decrement","actions","selectCount","counterToolkit","counterToolkitReducer","reducer","CounterReduxToolkit","count","dispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","handleIncrement","useCallback","handleDecrement","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","CounterSimpleActionType","counter","selectCounterSimple","counterSimple","CounterRedux","type","INCREMENT","DECREMENT","useCounterStore","create","CounterZustand","getState","setState","Dogs","memo","getLabel","isRevealed","isMine","neighbour","isFlagged","Cell","onContextMenu","handleClick","preventDefault","x","y","handleContextMenu","getMines","data","mineArray","forEach","dataRow","dataItem","push","getFlags","getHidden","datarow","dataitem","getRandomNumber","dimension","Math","floor","random","initBoardData","height","width","mines","i","j","isEmpty","updatedData","mine","traverseBoard","getNeighbours","randomx","randomy","minesPlanted","plantMines","el","cloneDeep","length","revealEmpty","revealBoard","JSON","parse","stringify","computeCellClick","boardData","GameStatus","Board","setBoardData","mineCount","setMineCount","setWon","useEffect","newMineCount","win","FlagArray","alert","BoardItemList","map","MineSweeperFC","handleSubmit","onSubmit","minesProp","useStore","useMemo","status","initial","remainingMines","running","actionInitiateBoard","won","actionFlagCell","lose","actionRevealCell","MineSweeperZustand","this","props","ref","cMenu","getValue","React","Component","gameWon","console","log","handleCellClick","_handleContextMenu","initGame","nextProps","renderBoard","MineSweeper","App","to","path","exact","component","href","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,mBCA9JD,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,kOCGjJC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,wBCMlDC,EAAeC,YAAY,CACpCC,KAAM,iBACNC,aAN+B,CAC/BC,MAAO,GAMPC,SAAU,CACNC,UAAW,SAACC,EAAOC,GACfD,EAAMH,OAASI,EAAOC,SAE1BC,UAAW,SAACH,EAAOC,GACfD,EAAMH,OAASI,EAAOC,Y,EAKMT,EAAaW,QAAtCL,E,EAAAA,UAAWI,E,EAAAA,UAEbE,EAAc,SAACL,GAAD,OAAsBA,EAAMM,eAAeT,OAEzDU,EAAwBd,EAAae,Q,OCtB3C,SAASC,IACZ,IAAMC,EAAQnB,EAAec,GACvBM,EAAWtB,IAFiB,EAGYuB,mBAAS,KAHrB,mBAG3BC,EAH2B,KAGVC,EAHU,KAK5BC,EAAiBC,OAAOH,IAAoB,EAC5CI,EAAkBC,uBAAY,WAChCP,EAASZ,EAAUgB,MACpB,CAACJ,EAAUI,IAERI,EAAkBD,uBAAY,WAChCP,EAASR,EAAUY,MACpB,CAACJ,EAAUI,IACd,OACI,gCACI,kDACA,sBAAKK,UAAWC,IAAOC,IAAvB,UACI,wBACIF,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASN,EAHb,eAOA,sBAAMC,UAAWC,IAAOxB,MAAxB,SAAgCa,IAChC,wBACIU,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASR,EAHb,kBAQJ,qBAAKG,UAAWC,IAAOC,IAAvB,SACI,uBACIF,UAAWC,IAAOK,QAClBF,aAAW,uBACX3B,MAAOgB,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAmBc,EAAEC,OAAOhC,e,ICzC5DiC,E,2BAAAA,K,sBAAAA,E,uBAAAA,M,KAqBL,IAAMlC,EAAmC,CACrCmC,QAAS,GAiBN,SAASC,EAAoBhC,GAChC,OAAOA,EAAMiC,cAAcF,QCrCxB,SAASG,IACZ,IAAMxB,EAAQnB,EAAeyC,GACvBrB,EAAWtB,IAFU,EAGmBuB,mBAAS,KAH5B,mBAGpBC,EAHoB,KAGHC,EAHG,KAKrBC,EAAiBC,OAAOH,IAAoB,EAC5CI,EAAkBC,uBAAY,WDgBjC,IAAmBrB,ECflBc,GDekBd,ECfCkB,EDgBhB,CACHoB,KAAML,EAAwBM,UAC9BvC,aCjBD,CAACc,EAAUI,IAERI,EAAkBD,uBAAY,WDmBjC,IAAmBrB,EClBlBc,GDkBkBd,EClBCkB,EDmBhB,CACHoB,KAAML,EAAwBO,UAC9BxC,aCpBD,CAACc,EAAUI,IAEd,OACI,gCACI,uCACA,sBAAKK,UAAWC,IAAOC,IAAvB,UACI,wBACIF,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASN,EAHb,eAOA,sBAAMC,UAAWC,IAAOxB,MAAxB,SAAgCa,IAChC,wBACIU,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASR,EAHb,kBAQJ,qBAAKG,UAAWC,IAAOC,IAAvB,SACI,uBACIF,UAAWC,IAAOK,QAClBF,aAAW,uBACX3B,MAAOgB,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAmBc,EAAEC,OAAOhC,e,sCCtCpDyC,EAAkBC,KAA4B,iBAAO,CAC9DR,QAAS,MCJN,SAASS,IAAkB,IACtBT,EAAYO,IAAZP,QADqB,EAEiBnB,mBAAS,KAF1B,mBAEtBC,EAFsB,KAELC,EAFK,KAIvBC,EAAiBC,OAAOH,IAAoB,EAC5CI,EAAkBC,uBAAY,YDEjC,SAAmBrB,GACtB,IAAMG,EAAQsC,EAAgBG,WAC9BH,EAAgBI,SAAS,CACrBX,QAAS/B,EAAM+B,QAAUlC,ICJzBE,CAAUgB,KACX,CAACA,IAEEI,EAAkBD,uBAAY,YDKjC,SAAmBrB,GACtB,IAAMG,EAAQsC,EAAgBG,WAC9BH,EAAgBI,SAAS,CACrBX,QAAS/B,EAAM+B,QAAUlC,ICPzBM,CAAUY,KACX,CAACA,IAEJ,OACI,gCACI,yCACA,sBAAKK,UAAWC,IAAOC,IAAvB,UACI,wBACIF,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASN,EAHb,eAOA,sBAAMC,UAAWC,IAAOxB,MAAxB,SAAgCkC,IAChC,wBACIX,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAASR,EAHb,kBAQJ,qBAAKG,UAAWC,IAAOC,IAAvB,SACI,uBACIF,UAAWC,IAAOK,QAClBF,aAAW,uBACX3B,MAAOgB,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAmBc,EAAEC,OAAOhC,eCxC1D,IAAM8C,EAAOC,gBAAK,WAGrB,OACI,8BACI,kDCeZ,SAASC,EAAShD,GACd,OAAKA,EAAMiD,WAGPjD,EAAMkD,OACC,eAEa,IAApBlD,EAAMmD,UACC,KAEJnD,EAAMmD,UARFnD,EAAMoD,UAAY,eAAO,KAWjC,IAAMC,EAAON,gBAAgB,YAAwC,IAArC/C,EAAoC,EAApCA,MAAOsD,EAA6B,EAA7BA,cAAe1B,EAAc,EAAdA,QACrDL,EAAY,QAAUvB,EAAMiD,WAAa,GAAK,YAAcjD,EAAMkD,OAAS,WAAa,KAAOlD,EAAMoD,UAAY,WAAa,IAE5HG,EAAclC,uBAAY,SAACU,GAC7BA,EAAEyB,iBACF5B,EAAQ5B,EAAMyD,EAAGzD,EAAM0D,KACxB,CAAC9B,EAAS5B,EAAMyD,EAAGzD,EAAM0D,IAEtBC,EAAoBtC,uBAAY,SAACU,GACnCA,EAAEyB,iBACFF,EAActD,EAAMyD,EAAGzD,EAAM0D,KAC9B,CAACJ,EAAetD,EAAMyD,EAAGzD,EAAM0D,IAElC,OACI,qBAAK9B,QAAS2B,EAAahC,UAAWA,EAAW+B,cAAeK,EAAhE,SACKX,EAAShD,QChDf,SAAS4D,EAASC,GACrB,IAAIC,EAAyB,GAU7B,OARAD,EAAKE,SAAQ,SAACC,GACVA,EAAQD,SAAQ,SAACE,GACTA,EAASf,QACTY,EAAUI,KAAKD,SAKpBH,EAGJ,SAASK,EAASN,GACrB,IAAIC,EAAyB,GAU7B,OARAD,EAAKE,SAAQ,SAACC,GACVA,EAAQD,SAAQ,SAACE,GACTA,EAASb,WACTU,EAAUI,KAAKD,SAKpBH,EAGJ,SAASM,EAAUP,GACtB,IAAIC,EAAyB,GAU7B,OARAD,EAAKE,SAAQ,SAACM,GACVA,EAAQN,SAAQ,SAACO,GACRA,EAASrB,YACVa,EAAUI,KAAKI,SAKpBR,EAGX,SAASS,EAAgBC,GAErB,OAAOC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAmB,GAAKH,EA0C7C,SAASI,EAAcC,EAAgBC,EAAeC,GAGzD,IAFA,IAAIlB,EAAsB,GAEjBmB,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7BnB,EAAKK,KAAK,IACV,IAAK,IAAIe,EAAI,EAAGA,EAAIH,EAAOG,IACvBpB,EAAKmB,GAAGC,GAAK,CACTxB,EAAGuB,EACHtB,EAAGuB,EACH/B,QAAQ,EACRC,UAAW,EACXF,YAAY,EACZiC,SAAS,EACT9B,WAAW,GAMvB,OADAS,EA1CJ,SAAuBA,EAAqBgB,EAAgBC,GAGxD,IAFA,IAAIK,EAActB,EAETmB,EAAI,EAAGA,EAAIH,EAAQG,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOG,KACG,IAAtBpB,EAAKmB,GAAGC,GAAG/B,QAAkB,WAC7B,IAAIkC,EAAO,EACEC,EAAcxB,EAAKmB,GAAGC,GAAGxB,EAAGI,EAAKmB,GAAGC,GAAGvB,EAAGG,GAClDE,SAAQ,SAAC/D,GACNA,EAAMkD,QACNkC,OAGK,IAATA,IACAD,EAAYH,GAAGC,GAAGC,SAAU,GAEhCC,EAAYH,GAAGC,GAAG9B,UAAYiC,EAXD,GAgBzC,OAAQD,EAqBDG,CADPzB,EAxDJ,SAAoBA,EAAqBgB,EAAgBC,EAAeC,GAGpE,IAFA,IAAIQ,EAASC,EAASC,EAAe,EAE9BA,EAAeV,GAClBQ,EAAUhB,EAAgBO,GAC1BU,EAAUjB,EAAgBM,GACpBhB,EAAK0B,GAASC,GAAStC,SACzBW,EAAK0B,GAASC,GAAStC,QAAS,EAChCuC,KAIR,OAAQ5B,EA4CD6B,CAAW7B,EAAMgB,EAAQC,EAAOC,GACZF,EAAQC,GAIvC,SAASO,EAAc5B,EAAWC,EAAWG,GACzC,IAAM8B,EAAK,GACLR,EAAcS,EAAU/B,GACxBgB,EAASM,EAAYU,OACrBf,EAAQK,EAAY,GAAGU,OAyC7B,OAvCIpC,EAAI,GACJkC,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,IAI3BD,EAAIoB,EAAS,GACbc,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,IAI3BA,EAAI,GACJiC,EAAGzB,KAAKiB,EAAY1B,GAAGC,EAAI,IAI3BA,EAAIoB,EAAQ,GACZa,EAAGzB,KAAKiB,EAAY1B,GAAGC,EAAI,IAI3BD,EAAI,GAAKC,EAAI,GACbiC,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,EAAI,IAI/BD,EAAI,GAAKC,EAAIoB,EAAQ,GACrBa,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,EAAI,IAI/BD,EAAIoB,EAAS,GAAKnB,EAAIoB,EAAQ,GAC9Ba,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,EAAI,IAI/BD,EAAIoB,EAAS,GAAKnB,EAAI,GACtBiC,EAAGzB,KAAKiB,EAAY1B,EAAI,GAAGC,EAAI,IAG5BiC,EAGJ,SAASG,EAAYrC,EAAWC,EAAWG,GAU9C,OATWwB,EAAc5B,EAAGC,EAAGG,GAC1BE,SAAQ,SAAC/D,GACLA,EAAMiD,aAAejD,EAAMkF,SAAYlF,EAAMkD,SAC9CW,EAAK7D,EAAMyD,GAAGzD,EAAM0D,GAAGT,YAAa,EAChCjD,EAAMkF,SACNY,EAAY9F,EAAMyD,EAAGzD,EAAM0D,EAAGG,OAInCA,EAGJ,SAASkC,EAAYlC,GACxB,IAAMsB,EAAcS,EAAU/B,GAO9B,OALAsB,EAAYpB,SAAQ,SAACM,GACjBA,EAAQN,SAAQ,SAACO,GACbA,EAASrB,YAAa,QAGvBkC,EAGJ,SAASS,EAAa/B,GACzB,OAAOmC,KAAKC,MAAMD,KAAKE,UAAUrC,IAI9B,SAASsC,EAAiBC,EAA0B3C,EAAWC,EAAWqB,GAC7E,GAAIqB,EAAU3C,GAAGC,GAAGT,WAChB,OAAOmD,EAGX,GAAIA,EAAU3C,GAAGC,GAAGR,OAChB,OAAO6C,EAAYK,GAGvB,IAAIjB,EAAcS,EAAUQ,GAQ5B,OAPAjB,EAAY1B,GAAGC,GAAGN,WAAY,EAC9B+B,EAAY1B,GAAGC,GAAGT,YAAa,EAE3BkC,EAAY1B,GAAGC,GAAGwB,UAClBC,EAAcW,EAAYrC,EAAGC,EAAGyB,IAGhCf,EAAUe,GAAaU,SAAWd,EAC3BgB,EAAYK,GAEhBjB,E,UClLCkB,ECTCC,EAAQvD,gBAAuB,YAA+B,IAA5BgC,EAA2B,EAA3BA,MAAOF,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAAY,EACpC/D,oBAAwB,kBAAM6D,EAAcC,EAAQC,EAAOC,MADvB,mBAC/DqB,EAD+D,KACpDG,EADoD,OAEpCxF,mBAAiBgE,GAFmB,mBAE/DyB,EAF+D,KAEpDC,EAFoD,OAGhD1F,oBAAkB,GAH8B,mBAG1D2F,GAH0D,WAKtEC,qBAAU,WACNJ,EAAa3B,EAAcC,EAAQC,EAAOC,MAC3C,CAACF,EAAQC,EAAOC,IAEnB,IAAMpB,EAAoBtC,uBAAY,SAACoC,EAAWC,GAC9C,IAAIkD,EAAeJ,EACfK,GAAM,EAGV,IAAIT,EAAU3C,GAAGC,GAAGT,WAApB,CAGA,IAAMkC,EAAcS,EAAUQ,GAU9B,GARIjB,EAAY1B,GAAGC,GAAGN,WAClB+B,EAAY1B,GAAGC,GAAGN,WAAY,EAC9BwD,MAEAzB,EAAY1B,GAAGC,GAAGN,WAAY,EAC9BwD,KAGiB,IAAjBA,EAAoB,CACpB,IAAM9C,EAAYF,EAASuB,GACrB2B,EAAY3C,EAASgB,IAC3B0B,EAAOb,KAAKE,UAAUpC,KAAekC,KAAKE,UAAUY,MAEhDP,EAAaR,EAAYZ,IACzB4B,MAAM,YAIdR,EAAapB,GACbsB,EAAa7C,EAASuB,GAAaU,QACnCa,EAAOG,MACR,CAACT,EAAWI,IAETjD,EAAclC,uBAAY,SAACoC,EAAGC,GAChC,IAAI0C,EAAU3C,GAAGC,GAAGT,WAApB,CAGImD,EAAU3C,GAAGC,GAAGR,QAChB6D,MAAM,aAEV,IAAM5B,EAAcgB,EAAiBC,EAAW3C,EAAGC,EAAGqB,GAElDX,EAAUe,GAAaU,SAAWd,IAClC2B,GAAO,GACPK,MAAM,YAEVR,EAAapB,GACbsB,EAAa1B,EAAQZ,EAASgB,GAAaU,WAC5C,CAACO,EAAWrB,IAGf,OACI,qBAAKxD,UAAU,QAAf,SACI,cAACyF,EAAD,CACInD,KAAMuC,EACN9C,cAAeK,EACf/B,QAAS2B,SAWZyD,EAAgBjE,gBAAyB,YAAuC,IAApCc,EAAmC,EAAnCA,KAAMP,EAA6B,EAA7BA,cAAe1B,EAAc,EAAdA,QAC1E,OACI,mCACKiC,EAAKoD,KAAI,SAACjD,EAASP,GAAV,OACN,8BAEQO,EAAQiD,KAAI,SAAChD,GAAD,OACR,gCACI,cAAC,EAAD,CACIrC,QAASA,EACT0B,cAAeA,EACftD,MAAOiE,IAETD,EAAQA,EAAQ6B,OAAS,KAAO5B,EAAY,qBAAK1C,UAAU,UAAa,KANpE,QAAU0C,EAASR,EAAIO,EAAQ6B,OAAS5B,EAASP,OAH7D,OAASD,EAAIO,EAAQ6B,gBCjGxC,SAASqB,IACZ,IAAMC,EAAe9F,uBAAY,SAACU,GAC9BA,EAAEyB,mBACH,IAEH,OACI,qCACI,8CACA,mGACA,uBACI4D,SAAUD,EADd,UAII,cAAC,EAAD,CAAOtC,OAAQ,GAAIC,MAAO,GAAIC,MAAO,KACrC,mD,SFYJsB,O,qBAAAA,I,qBAAAA,I,aAAAA,I,gBAAAA,M,eGXCC,EAAQvD,gBAAuB,YAA0C,IAAhCsE,EAA+B,EAAtCtC,MAAkBF,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC/DwC,EHmBCC,mBAAQ,kBAAM7E,KAAyB,iBAAO,CACjD0D,UAAW,GACXoB,OAAQnB,EAAWoB,QACnB1C,MAAO,EACP2C,eAAgB,QACf,IGzB4E,EAGnDJ,IAAtBlB,EAHyE,EAGzEA,UAAWoB,EAH8D,EAG9DA,OACnBb,qBAAU,YHyBP,SAA6BW,EAAsCxC,EAAeD,EAAgBE,GACrGuC,EAASzE,SAAS,CACd2E,OAAQnB,EAAWsB,QACnB5C,QACA2C,eAAgB3C,EAChBqB,UAAWxB,EAAcC,EAAQC,EAAOC,KG7BxC6C,CAAoBN,EAAUxC,EAAOD,EAAQwC,KAC9C,CAACxC,EAAQwC,EAAWC,EAAUxC,IAEjC,IAAMnB,EAAoBtC,uBAAY,SAACoC,EAAWC,IHqD/C,SAAwB4D,EAAsC7D,EAAWC,GAAY,IAAD,EAClC4D,EAAS1E,WAAtD8E,EAD+E,EAC/EA,eAAgB3C,EAD+D,EAC/DA,MAAOqB,EADwD,EACxDA,UAAWoB,EAD6C,EAC7CA,OACtCZ,EAAec,EAInB,IAAItB,EAAU3C,GAAGC,GAAGT,WAApB,CAGA,IAAMkC,EAAcS,EAAUQ,GAU9B,GARIjB,EAAY1B,GAAGC,GAAGN,WAClB+B,EAAY1B,GAAGC,GAAGN,WAAY,EAC9BwD,MAEAzB,EAAY1B,GAAGC,GAAGN,WAAY,EAC9BwD,KAGiB,IAAjBA,EAAoB,CACpB,IAAM9C,EAAYF,EAASuB,GACrB2B,EAAY3C,EAASgB,GACpBa,KAAKE,UAAUpC,KAAekC,KAAKE,UAAUY,IAEhDQ,EAASzE,SAAS,CACd2E,OAAQnB,EAAWwB,IACnB9C,MAAOA,EACPqB,UAAWL,EAAYZ,GACvBuC,eAAgB,SAIxBJ,EAASzE,SAAS,CACd2E,OAAQA,EACRzC,MAAOA,EACPqB,UAAWjB,EACXuC,eAAgB9D,EAASuB,GAAaU,UGxF1CiC,CAAeR,EAAU7D,EAAGC,KAC7B,CAAC4D,IAEE/D,EAAclC,uBAAY,SAACoC,EAAGC,IH0BjC,SAA0B4D,EAAsC7D,EAAWC,GAAY,IAAD,EAC5C4D,EAAS1E,WAA9C8E,EADiF,EACjFA,eAAgB3C,EADiE,EACjEA,MAAOqB,EAD0D,EAC1DA,UAE/B,IAAIA,EAAU3C,GAAGC,GAAGT,WAApB,CAGA,IAAI4E,EAAMxB,EAAWsB,QAEjBvB,EAAU3C,GAAGC,GAAGR,SACjB2E,EAAMxB,EAAW0B,MAEpB,IAAM5C,EAAcgB,EAAiBC,EAAW3C,EAAGC,EAAGqB,GAClDX,EAAUe,GAAaU,SAAWd,IAClC8C,EAAMxB,EAAWwB,KAErBP,EAASzE,SAAS,CACd2E,OAAQK,EACRH,iBACA3C,QACAqB,UAAWjB,KG5CX6C,CAAiBV,EAAU7D,EAAGC,KAC/B,CAAC4D,IAUJ,OARAX,qBAAU,WACFa,IAAWnB,EAAWwB,IACtBd,MAAM,WACCS,IAAWnB,EAAW0B,MAC7BhB,MAAM,eAEX,CAACS,IAGA,qBAAKjG,UAAU,QAAf,SACI,cAACyF,EAAD,CACInD,KAAMuC,EACN9C,cAAeK,EACf/B,QAAS2B,SC5ClB,SAAS0E,KACZ,IAAMd,EAAe9F,uBAAY,SAACU,GAC9BA,EAAEyB,mBACH,IAEH,OACI,qCACI,sDACA,mGACA,uBACI4D,SAAUD,EADd,UAII,cAAC,EAAD,CAAOtC,OAAQ,GAAIC,MAAO,GAAIC,MAAO,KACrC,kD,wCCTH1B,GAAb,kKAEI,WACI,OAAK6E,KAAKC,MAAMnI,MAAMiD,WAGlBiF,KAAKC,MAAMnI,MAAMkD,OACV,eAEwB,IAA/BgF,KAAKC,MAAMnI,MAAMmD,UACV,KAEJ+E,KAAKC,MAAMnI,MAAMmD,UARb+E,KAAKC,MAAMnI,MAAMoD,UAAY,eAAO,OAJvD,oBAeI,WACI,IAAI7B,EAAY,QAAU2G,KAAKC,MAAMnI,MAAMiD,WAAa,GAAK,YAAciF,KAAKC,MAAMnI,MAAMkD,OAAS,WAAa,KAAOgF,KAAKC,MAAMnI,MAAMoD,UAAY,WAAa,IAGnK,OACI,qBAAKgF,IAAI,OAAOxG,QAASsG,KAAKC,MAAMvG,QAASL,UAAWA,EAAW+B,cAAe4E,KAAKC,MAAME,MAA7F,SACKH,KAAKI,iBArBtB,GAA0BC,IAAMC,WCEXlC,I,qNACjBnG,MAAQ,CACJiG,UAAW,GACXqC,SAAS,EACTjC,UAAW,EAAK2B,MAAMpD,O,+CAG1B,WACImD,KAAKrF,SAAS,CACVuD,UAAW8B,KAAKtD,cAAcsD,KAAKC,MAAMtD,OAAQqD,KAAKC,MAAMrD,MAAOoD,KAAKC,MAAMpD,OAC9E0D,SAAS,EACTjC,UAAW0B,KAAKC,MAAMpD,U,sBAK9B,SAASlB,GACL,IAAIC,EAAmB,GAUvB,OARAD,EAAKoD,KAAI,SAAC5C,GACNA,EAAQ4C,KAAI,SAAChD,GACLA,EAASf,QACTY,EAAUI,KAAKD,SAKpBH,I,sBAGX,SAASD,GACL,IAAIC,EAAY,GAUhB,OARAD,EAAKoD,KAAI,SAAC5C,GACNA,EAAQ4C,KAAI,SAAC3C,GACLA,EAASlB,WACTU,EAAUI,KAAKI,SAKpBR,I,uBAIX,SAAUD,GACN,IAAIC,EAAY,GAUhB,OARAD,EAAKE,SAAQ,SAACM,GACVA,EAAQN,SAAQ,SAACO,GACRA,EAASrB,YACVa,EAAUI,KAAKI,SAKpBR,I,6BAIX,SAAgBU,GAEZ,OAAOC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAmB,GAAKH,I,2BAIpD,SAAcK,EAAgBC,EAAeC,GAGzC,IAFA,IAAIlB,EAAO,GAEFmB,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7BnB,EAAKK,KAAK,IACV,IAAK,IAAIe,EAAI,EAAGA,EAAIH,EAAOG,IACvBpB,EAAKmB,GAAGC,GAAK,CACTxB,EAAGuB,EACHtB,EAAGuB,EACH/B,QAAQ,EACRC,UAAW,EACXF,YAAY,EACZiC,SAAS,EACT9B,WAAW,GAOvB,OAHAS,EAAOqE,KAAKxC,WAAW7B,EAAMgB,EAAQC,EAAOC,GAC5ClB,EAAOqE,KAAK5C,cAAczB,EAAMgB,EAAQC,GACxC4D,QAAQC,IAAI9E,GACLA,I,wBAIX,SAAWA,EAAMgB,EAAQC,EAAOC,GAG5B,IAFA,IAAIQ,EAASC,EAASC,EAAe,EAE9BA,EAAeV,GAClBQ,EAAU2C,KAAK3D,gBAAgBO,GAC/BU,EAAU0C,KAAK3D,gBAAgBM,GACzBhB,EAAK0B,GAASC,GAAStC,SACzBW,EAAK0B,GAASC,GAAStC,QAAS,EAChCuC,KAIR,OAAQ5B,I,2BAIZ,SAAcA,EAAMgB,EAAQC,GAGxB,IAHgC,IAAD,OAC3BK,EAActB,EAETmB,EAAI,EAAGA,EAAIH,EAAQG,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOG,KACG,IAAtBpB,EAAKmB,GAAGC,GAAG/B,QAAkB,WAC7B,IAAIkC,EAAO,EACE,EAAKC,cAAcxB,EAAKmB,GAAGC,GAAGxB,EAAGI,EAAKmB,GAAGC,GAAGvB,EAAGG,GACvDoD,KAAI,SAAAjH,GACDA,EAAMkD,QACNkC,OAGK,IAATA,IACAD,EAAYH,GAAGC,GAAGC,SAAU,GAEhCC,EAAYH,GAAGC,GAAG9B,UAAYiC,EAXD,GAgBzC,OAAQD,I,2BAIZ,SAAc1B,EAAGC,EAAGG,GAChB,IAAM8B,EAAK,GA0CX,OAvCIlC,EAAI,GACJkC,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,IAIpBD,EAAIyE,KAAKC,MAAMtD,OAAS,GACxBc,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,IAIpBA,EAAI,GACJiC,EAAGzB,KAAKL,EAAKJ,GAAGC,EAAI,IAIpBA,EAAIwE,KAAKC,MAAMrD,MAAQ,GACvBa,EAAGzB,KAAKL,EAAKJ,GAAGC,EAAI,IAIpBD,EAAI,GAAKC,EAAI,GACbiC,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,EAAI,IAIxBD,EAAI,GAAKC,EAAIwE,KAAKC,MAAMrD,MAAQ,GAChCa,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,EAAI,IAIxBD,EAAIyE,KAAKC,MAAMtD,OAAS,GAAKnB,EAAIwE,KAAKC,MAAMrD,MAAQ,GACpDa,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,EAAI,IAIxBD,EAAIyE,KAAKC,MAAMtD,OAAS,GAAKnB,EAAI,GACjCiC,EAAGzB,KAAKL,EAAKJ,EAAI,GAAGC,EAAI,IAGrBiC,I,yBAIX,WACI,IAAIR,EAAc+C,KAAK/H,MAAMiG,UAC7BjB,EAAY8B,KAAI,SAAC5C,GACbA,EAAQ4C,KAAI,SAAC3C,GACTA,EAASrB,YAAa,QAG9BiF,KAAKrF,SAAS,CACVuD,UAAWjB,M,yBAKnB,SAAY1B,EAAGC,EAAGG,GAAO,IAAD,OAUpB,OATWqE,KAAK7C,cAAc5B,EAAGC,EAAGG,GAC/BoD,KAAI,SAAAjH,GACAA,EAAMiD,aAAejD,EAAMkF,SAAYlF,EAAMkD,SAC9CW,EAAK7D,EAAMyD,GAAGzD,EAAM0D,GAAGT,YAAa,EAChCjD,EAAMkF,SACN,EAAKY,YAAY9F,EAAMyD,EAAGzD,EAAM0D,EAAGG,OAIxCA,I,6BAMX,SAAgBJ,EAAGC,GACf,IAAImD,GAAM,EAGV,GAAIqB,KAAK/H,MAAMiG,UAAU3C,GAAGC,GAAGT,WAC3B,OAAO,KAIPiF,KAAK/H,MAAMiG,UAAU3C,GAAGC,GAAGR,SAC3BgF,KAAKnC,cACLgB,MAAM,cAGV,IAAI5B,EAAc+C,KAAK/H,MAAMiG,UAC7BjB,EAAY1B,GAAGC,GAAGN,WAAY,EAC9B+B,EAAY1B,GAAGC,GAAGT,YAAa,EAE3BkC,EAAY1B,GAAGC,GAAGwB,UAClBC,EAAc+C,KAAKpC,YAAYrC,EAAGC,EAAGyB,IAGrC+C,KAAK9D,UAAUe,GAAaU,SAAWqC,KAAKC,MAAMpD,QAClD8B,GAAM,EACNqB,KAAKnC,cACLgB,MAAM,YAGVmB,KAAKrF,SAAS,CACVuD,UAAWjB,EACXqB,UAAW0B,KAAKC,MAAMpD,MAAQmD,KAAK/D,SAASgB,GAAaU,OACzD4C,QAAS5B,M,gCAIjB,SAAmB9E,EAAG0B,EAAGC,GACrB3B,EAAEyB,iBACF,IAAI2B,EAAc+C,KAAK/H,MAAMiG,UACzBrB,EAAQmD,KAAK/H,MAAMqG,UACnBK,GAAM,EAGV,IAAI1B,EAAY1B,GAAGC,GAAGT,WAAtB,CAYA,GARIkC,EAAY1B,GAAGC,GAAGN,WAClB+B,EAAY1B,GAAGC,GAAGN,WAAY,EAC9B2B,MAEAI,EAAY1B,GAAGC,GAAGN,WAAY,EAC9B2B,KAGU,IAAVA,EAAa,CACb,IAAMjB,EAAYoE,KAAKtE,SAASuB,GAC1B2B,EAAYoB,KAAK/D,SAASgB,IAChC0B,EAAOb,KAAKE,UAAUpC,KAAekC,KAAKE,UAAUY,MAEhDoB,KAAKnC,cACLgB,MAAM,YAIdmB,KAAKrF,SAAS,CACVuD,UAAWjB,EACXqB,UAAWzB,EACX0D,QAAS5B,O,yBAIjB,SAAYhD,GAAO,IAAD,OACd,OAAOA,EAAKoD,KAAI,SAACjD,EAASP,GAAV,OACZ,8BACKO,EAAQiD,KAAI,SAAC3C,GACV,OACI,gCACI,cAAC,GAAD,CACI1C,QAAS,kBAAM,EAAKgH,gBAAgBtE,EAASb,EAAGa,EAASZ,IACzD2E,MAAO,SAACtG,GAAD,OAAO,EAAK8G,mBAAmB9G,EAAGuC,EAASb,EAAGa,EAASZ,IAC9D1D,MAAOsE,IAETN,EAAQA,EAAQ6B,OAAS,KAAOvB,EAAY,qBAAK/C,UAAU,UAAa,KANpE+C,EAASb,EAAIO,EAAQ6B,OAASvB,EAASZ,OAHnD,OAASD,EAAIO,EAAQ6B,a,gCAiBvC,WACIqC,KAAKY,a,uCAGT,SAA0BC,GAClB/C,KAAKE,UAAUgC,KAAKC,SAAWnC,KAAKE,UAAU6C,IAC9Cb,KAAKY,a,oBAIb,WACI,OACI,qBAAKvH,UAAU,QAAf,SACK2G,KAAKc,YAAYd,KAAK/H,MAAMiG,iB,GAtTVmC,IAAMC,YCPlC,SAASS,KAEZ,IAAM9B,EAAe9F,uBAAY,SAACU,GAC9BA,EAAEyB,mBACH,IAEH,OACI,qCACI,8CACA,2FACA,uBACI4D,SAAUD,EADd,UAKI,cAAC,GAAD,CAAOtC,OAAQ,GAAIC,MAAO,GAAIC,MAAO,KAErC,kDC+CDmE,OAvDf,WACI,OACI,cAAC,IAAD,UACI,sBAAK3H,UAAU,MAAf,UACI,8BACI,+BACI,6BACI,cAAC,IAAD,CAAM4H,GAAG,IAAT,oBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,iBAAT,qBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,yBAAT,6BAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,mBAAT,uBAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,eAAT,2BAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,iBAAT,6BAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,sBAAT,uCAOZ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,iBAAiBC,OAAK,EAACC,UAAWjH,IAC9C,cAAC,IAAD,CAAO+G,KAAK,yBAAyBC,OAAK,EAACC,UAAW1I,IACtD,cAAC,IAAD,CAAOwI,KAAK,mBAAmBC,OAAK,EAACC,UAAW3G,IAChD,cAAC,IAAD,CAAOyG,KAAK,eAAeC,OAAK,EAACC,UAAWL,KAC5C,cAAC,IAAD,CAAOG,KAAK,iBAAiBC,OAAK,EAACC,UAAWpC,IAC9C,cAAC,IAAD,CAAOkC,KAAK,sBAAsBC,OAAK,EAACC,UAAWrB,KACnD,cAAC,IAAD,CAAOmB,KAAK,QAAQC,OAAK,EAACC,UAAWxG,IACrC,eAAC,IAAD,CAAOuG,OAAK,EAACD,KAAK,IAAlB,UACI,0EACA,uBAAM,uBACN,6BACI,mBAAGG,KAAK,uGAAR,kCClDfC,GAAQC,YAAyB,CAC1C9I,QAAS,CACLyB,chBsCD,WAAmH,IAArFjC,EAAoF,uDAA5EJ,EAAcK,EAA8D,uCACrH,OAAQA,EAAOkC,MACX,KAAKL,EAAwBM,UACzB,MAAO,CACHL,QAAS/B,EAAM+B,QAAU9B,EAAOJ,OAExC,KAAKiC,EAAwBO,UACzB,MAAO,CACHN,QAAS/B,EAAM+B,QAAU9B,EAAOJ,OAExC,QACI,OAAOG,IgBhDXM,eAAgBC,KCGJgJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJU,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNjC,QAAQiC,MAAMA,EAAMC,a,kBE7I5BtL,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,sD","file":"static/js/main.d4455403.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3iRd-\",\"value\":\"Counter_value__hN5tX\",\"button\":\"Counter_button__1C9Yv\",\"textbox\":\"Counter_textbox__2G8BO\",\"asyncButton\":\"Counter_asyncButton__2qo90 Counter_button__1C9Yv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__26bfh\",\"value\":\"Counter_value__Oir2o\",\"button\":\"Counter_button__3ei50\",\"textbox\":\"Counter_textbox__2j9Uy\",\"asyncButton\":\"Counter_asyncButton__EtgKY Counter_button__3ei50\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\n\nexport interface CounterState {\n    value: number;\n}\n\nconst initialState: CounterState = {\n    value: 0,\n};\n\nexport const counterStore = createSlice({\n    name: 'counterToolkit',\n    initialState,\n    reducers: {\n        increment: (state, action: PayloadAction<number>) => {\n            state.value += action.payload;\n        },\n        decrement: (state, action: PayloadAction<number>) => {\n            state.value -= action.payload;\n        },\n    },\n});\n\nexport const { increment, decrement } = counterStore.actions;\n\nexport const selectCount = (state: RootState) => state.counterToolkit.value;\n\nexport const counterToolkitReducer = counterStore.reducer;\n","import React, { useCallback, useState } from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\nimport styles from './Counter.module.css';\nimport { decrement, increment, selectCount } from './counter.store';\n\nexport function CounterReduxToolkit() {\n    const count = useAppSelector(selectCount);\n    const dispatch = useAppDispatch();\n    const [incrementAmount, setIncrementAmount] = useState('2');\n\n    const incrementValue = Number(incrementAmount) || 0;\n    const handleIncrement = useCallback(() => {\n        dispatch(increment(incrementValue));\n    }, [dispatch, incrementValue]);\n\n    const handleDecrement = useCallback(() => {\n        dispatch(decrement(incrementValue));\n    }, [dispatch, incrementValue]);\n    return (\n        <div>\n            <h1>@Reduxjs/toolkit</h1>\n            <div className={styles.row}>\n                <button\n                    className={styles.button}\n                    aria-label=\"Decrement value\"\n                    onClick={handleDecrement}\n                >\n                    -\n                </button>\n                <span className={styles.value}>{count}</span>\n                <button\n                    className={styles.button}\n                    aria-label=\"Increment value\"\n                    onClick={handleIncrement}\n                >\n                    +\n                </button>\n            </div>\n            <div className={styles.row}>\n                <input\n                    className={styles.textbox}\n                    aria-label=\"Set increment amount\"\n                    value={incrementAmount}\n                    onChange={(e) => setIncrementAmount(e.target.value)}\n                />\n            </div>\n        </div>\n    );\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport { AppState } from '../../../app/app-state';\n\nenum CounterSimpleActionType {\n    INCREMENT = 'INCREMENT',\n    DECREMENT = 'DECREMENT',\n}\n\ninterface CounterSimpleActionIncrement {\n    type: CounterSimpleActionType.INCREMENT,\n    value: number,\n}\n\ninterface CounterSimpleActionDecrement {\n    type: CounterSimpleActionType.DECREMENT,\n    value: number,\n}\n\ntype CounterSimpleActions = CounterSimpleActionDecrement | CounterSimpleActionIncrement;\n\nexport interface CounterSimpleState {\n    counter: number;\n}\n\nconst initialState: CounterSimpleState = {\n    counter: 0,\n};\n\nexport function increment(value: number): CounterSimpleActionIncrement {\n    return {\n        type: CounterSimpleActionType.INCREMENT,\n        value,\n    };\n}\n\nexport function decrement(value: number): CounterSimpleActionDecrement {\n    return {\n        type: CounterSimpleActionType.DECREMENT,\n        value,\n    };\n}\n\nexport function selectCounterSimple(state: AppState): number {\n    return state.counterSimple.counter;\n}\n\nexport function CounterSimpleReducer(state = initialState, action: CounterSimpleActions | AnyAction): CounterSimpleState {\n    switch (action.type) {\n        case CounterSimpleActionType.INCREMENT:\n            return {\n                counter: state.counter + action.value,\n            };\n        case CounterSimpleActionType.DECREMENT:\n            return {\n                counter: state.counter - action.value,\n            };\n        default:\n            return state;\n    }\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\nimport styles from './Counter.module.css';\nimport { decrement, increment, selectCounterSimple } from './counter.store';\n\nexport function CounterRedux() {\n    const count = useAppSelector(selectCounterSimple);\n    const dispatch = useAppDispatch();\n    const [incrementAmount, setIncrementAmount] = useState('2');\n\n    const incrementValue = Number(incrementAmount) || 0;\n    const handleIncrement = useCallback(() => {\n        dispatch(increment(incrementValue));\n    }, [dispatch, incrementValue]);\n\n    const handleDecrement = useCallback(() => {\n        dispatch(decrement(incrementValue));\n    }, [dispatch, incrementValue]);\n\n    return (\n        <div>\n            <h1>Redux</h1>\n            <div className={styles.row}>\n                <button\n                    className={styles.button}\n                    aria-label=\"Decrement value\"\n                    onClick={handleDecrement}\n                >\n                    -\n                </button>\n                <span className={styles.value}>{count}</span>\n                <button\n                    className={styles.button}\n                    aria-label=\"Increment value\"\n                    onClick={handleIncrement}\n                >\n                    +\n                </button>\n            </div>\n            <div className={styles.row}>\n                <input\n                    className={styles.textbox}\n                    aria-label=\"Set increment amount\"\n                    value={incrementAmount}\n                    onChange={(e) => setIncrementAmount(e.target.value)}\n                />\n            </div>\n        </div>\n    );\n}\n","import create from 'zustand';\n\nexport interface CounterZustandState {\n    counter: number,\n}\n\n// with SSR this will create isues, you need to use context for ssr to work\nexport const useCounterStore = create<CounterZustandState>(() => ({\n    counter: 0,\n}));\n\nexport function increment(value: number) {\n    const state = useCounterStore.getState();\n    useCounterStore.setState({\n        counter: state.counter + value,\n    });\n}\n\nexport function decrement(value: number) {\n    const state = useCounterStore.getState();\n    useCounterStore.setState({\n        counter: state.counter - value,\n    });\n}\n","import React, { useCallback, useState } from 'react';\nimport styles from './Counter.module.css';\nimport { decrement, increment, useCounterStore } from './counter.store';\n\nexport function CounterZustand() {\n    const { counter } = useCounterStore();\n    const [incrementAmount, setIncrementAmount] = useState('2');\n\n    const incrementValue = Number(incrementAmount) || 0;\n    const handleIncrement = useCallback(() => {\n        increment(incrementValue);\n    }, [incrementValue]);\n\n    const handleDecrement = useCallback(() => {\n        decrement(incrementValue);\n    }, [incrementValue]);\n\n    return (\n        <div>\n            <h1>Zustand</h1>\n            <div className={styles.row}>\n                <button\n                    className={styles.button}\n                    aria-label=\"Decrement value\"\n                    onClick={handleDecrement}\n                >\n                    -\n                </button>\n                <span className={styles.value}>{counter}</span>\n                <button\n                    className={styles.button}\n                    aria-label=\"Increment value\"\n                    onClick={handleIncrement}\n                >\n                    +\n                </button>\n            </div>\n            <div className={styles.row}>\n                <input\n                    className={styles.textbox}\n                    aria-label=\"Set increment amount\"\n                    value={incrementAmount}\n                    onChange={(e) => setIncrementAmount(e.target.value)}\n                />\n            </div>\n        </div>\n    );\n}\n","import { memo } from 'react';\n\nexport const Dogs = memo(() => {\n\n\n    return (\n        <div>\n            <h1>Dog listing</h1>\n\n\n        </div>\n    )\n});\n","import React, { memo, useCallback, MouseEvent } from 'react';\n\nexport interface CellValue {\n    isRevealed: boolean,\n    isMine: boolean,\n    isFlagged: boolean,\n    isEmpty: boolean,\n    neighbour: number,\n    x: number,\n    y: number,\n}\n\nexport interface CellClickHandler {\n    onClick: (x: number, y: number) => void,\n    onContextMenu: (x: number, y: number) => void,\n}\n\nexport interface CellProps extends CellClickHandler {\n    value: CellValue;\n}\n\n\nfunction getLabel(value: CellValue) {\n    if (!value.isRevealed) {\n        return value.isFlagged ? '🚩' : null;\n    }\n    if (value.isMine) {\n        return '💣';\n    }\n    if (value.neighbour === 0) {\n        return null;\n    }\n    return value.neighbour;\n}\n\nexport const Cell = memo<CellProps>(({ value, onContextMenu, onClick }) => {\n    let className = 'cell' + (value.isRevealed ? '' : ' hidden') + (value.isMine ? ' is-mine' : '') + (value.isFlagged ? ' is-flag' : '');\n\n    const handleClick = useCallback((e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        onClick(value.x, value.y);\n    }, [onClick, value.x, value.y]);\n\n    const handleContextMenu = useCallback((e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        onContextMenu(value.x, value.y);\n    }, [onContextMenu, value.x, value.y]);\n\n    return (\n        <div onClick={handleClick} className={className} onContextMenu={handleContextMenu}>\n            {getLabel(value)}\n        </div>\n    );\n});\n","import { CellValue } from './cell';\n\nexport function getMines(data: CellValue[][]): CellValue[] {\n    let mineArray: CellValue[] = [];\n\n    data.forEach((dataRow) => {\n        dataRow.forEach((dataItem) => {\n            if (dataItem.isMine) {\n                mineArray.push(dataItem);\n            }\n        });\n    });\n\n    return mineArray;\n}\n\nexport function getFlags(data: CellValue[][]): CellValue[] {\n    let mineArray: CellValue[] = [];\n\n    data.forEach((dataRow) => {\n        dataRow.forEach((dataItem) => {\n            if (dataItem.isFlagged) {\n                mineArray.push(dataItem);\n            }\n        });\n    });\n\n    return mineArray;\n}\n\nexport function getHidden(data: CellValue[][]): CellValue[] {\n    let mineArray: CellValue[] = [];\n\n    data.forEach((datarow) => {\n        datarow.forEach((dataitem) => {\n            if (!dataitem.isRevealed) {\n                mineArray.push(dataitem);\n            }\n        });\n    });\n\n    return mineArray;\n}\n\nfunction getRandomNumber(dimension: number): number {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\n}\n\nfunction plantMines(data: CellValue[][], height: number, width: number, mines: number): CellValue[][] {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n        randomx = getRandomNumber(width);\n        randomy = getRandomNumber(height);\n        if (!(data[randomx][randomy].isMine)) {\n            data[randomx][randomy].isMine = true;\n            minesPlanted++;\n        }\n    }\n\n    return (data);\n}\n\nfunction getNeighbours(data: CellValue[][], height: number, width: number): CellValue[][] {\n    let updatedData = data;\n\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            if (data[i][j].isMine !== true) {\n                let mine = 0;\n                const area = traverseBoard(data[i][j].x, data[i][j].y, data);\n                area.forEach((value) => {\n                    if (value.isMine) {\n                        mine++;\n                    }\n                });\n                if (mine === 0) {\n                    updatedData[i][j].isEmpty = true;\n                }\n                updatedData[i][j].neighbour = mine;\n            }\n        }\n    }\n\n    return (updatedData);\n}\n\nexport function initBoardData(height: number, width: number, mines: number): CellValue[][] {\n    let data: CellValue[][] = [];\n\n    for (let i = 0; i < height; i++) {\n        data.push([]);\n        for (let j = 0; j < width; j++) {\n            data[i][j] = {\n                x: i,\n                y: j,\n                isMine: false,\n                neighbour: 0,\n                isRevealed: false,\n                isEmpty: false,\n                isFlagged: false,\n            };\n        }\n    }\n    data = plantMines(data, height, width, mines);\n    data = getNeighbours(data, height, width);\n    return data;\n}\n\nfunction traverseBoard(x: number, y: number, data: CellValue[][]) {\n    const el = [];\n    const updatedData = cloneDeep(data);\n    const height = updatedData.length;\n    const width = updatedData[0].length;\n    //up\n    if (x > 0) {\n        el.push(updatedData[x - 1][y]);\n    }\n\n    //down\n    if (x < height - 1) {\n        el.push(updatedData[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n        el.push(updatedData[x][y - 1]);\n    }\n\n    //right\n    if (y < width - 1) {\n        el.push(updatedData[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n        el.push(updatedData[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < width - 1) {\n        el.push(updatedData[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < height - 1 && y < width - 1) {\n        el.push(updatedData[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < height - 1 && y > 0) {\n        el.push(updatedData[x + 1][y - 1]);\n    }\n\n    return el;\n}\n\nexport function revealEmpty(x: number, y: number, data: CellValue[][]): CellValue[][] {\n    let area = traverseBoard(x, y, data);\n    area.forEach((value) => {\n        if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\n            data[value.x][value.y].isRevealed = true;\n            if (value.isEmpty) {\n                revealEmpty(value.x, value.y, data);\n            }\n        }\n    });\n    return data;\n}\n\nexport function revealBoard(data: CellValue[][]): CellValue[][] {\n    const updatedData = cloneDeep(data);\n\n    updatedData.forEach((datarow) => {\n        datarow.forEach((dataitem) => {\n            dataitem.isRevealed = true;\n        });\n    });\n    return updatedData;\n}\n\nexport function cloneDeep<T>(data: T): T {\n    return JSON.parse(JSON.stringify(data));\n}\n\n\nexport function computeCellClick(boardData: CellValue[][], x: number, y: number, mines: number): CellValue[][] {\n    if (boardData[x][y].isRevealed) {\n        return boardData;\n    }\n\n    if (boardData[x][y].isMine) {\n        return revealBoard(boardData);\n    }\n\n    let updatedData = cloneDeep(boardData);\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n        updatedData = revealEmpty(x, y, updatedData);\n    }\n\n    if (getHidden(updatedData).length === mines) {\n        return revealBoard(boardData);\n    }\n    return updatedData;\n}\n","import { useMemo } from 'react';\nimport create, { UseStore } from 'zustand';\nimport {\n    cloneDeep,\n    computeCellClick,\n    getFlags,\n    getHidden,\n    getMines,\n    initBoardData,\n    revealBoard,\n} from '../minesweeper-refactored/mine-sweeper.utils';\n\nexport interface CellValue {\n    isRevealed: boolean,\n    isMine: boolean,\n    isFlagged: boolean,\n    isEmpty: boolean,\n    neighbour: number,\n    x: number,\n    y: number,\n}\n\ninterface MineSweeperState {\n    boardData: CellValue[][],\n    mines: number,\n    remainingMines: number,\n    status: GameStatus\n}\n\nexport enum GameStatus {\n    initial,\n    running,\n    won,\n    lose,\n\n}\n\nexport function useCreateMineSweeperStore() {\n    return useMemo(() => create<MineSweeperState>(() => ({\n        boardData: [],\n        status: GameStatus.initial,\n        mines: 0,\n        remainingMines: 0,\n    })), []);\n}\n\n\nexport function actionInitiateBoard(useStore: UseStore<MineSweeperState>, width: number, height: number, mines: number) {\n    useStore.setState({\n        status: GameStatus.running,\n        mines,\n        remainingMines: mines,\n        boardData: initBoardData(height, width, mines),\n    });\n}\n\nexport function actionRevealCell(useStore: UseStore<MineSweeperState>, x: number, y: number) {\n    const { remainingMines, mines, boardData } = useStore.getState();\n\n    if (boardData[x][y].isRevealed) {\n        return;\n    }\n    let won = GameStatus.running;\n\n    if (boardData[x][y].isMine) {\n       won = GameStatus.lose;\n    }\n    const updatedData = computeCellClick(boardData, x, y, mines);\n    if (getHidden(updatedData).length === mines) {\n        won = GameStatus.won;\n    }\n    useStore.setState({\n        status: won,\n        remainingMines,\n        mines,\n        boardData: updatedData,\n    });\n}\n\nexport function actionFlagCell(useStore: UseStore<MineSweeperState>, x: number, y: number) {\n    const { remainingMines, mines, boardData, status } = useStore.getState();\n    let newMineCount = remainingMines;\n    let win = false;\n\n    // check if already revealed\n    if (boardData[x][y].isRevealed) {\n        return;\n    }\n    const updatedData = cloneDeep(boardData);\n\n    if (updatedData[x][y].isFlagged) {\n        updatedData[x][y].isFlagged = false;\n        newMineCount++;\n    } else {\n        updatedData[x][y].isFlagged = true;\n        newMineCount--;\n    }\n\n    if (newMineCount === 0) {\n        const mineArray = getMines(updatedData);\n        const FlagArray = getFlags(updatedData);\n        win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\n        if (win) {\n            useStore.setState({\n                status: GameStatus.won,\n                mines: mines,\n                boardData: revealBoard(updatedData),\n                remainingMines: 0,\n            });\n        }\n    } else {\n        useStore.setState({\n            status: status,\n            mines: mines,\n            boardData: updatedData,\n            remainingMines: getMines(updatedData).length,\n        });\n    }\n}\n","import React, { memo, useCallback, useEffect, useState } from 'react';\nimport { Cell, CellClickHandler, CellValue } from './cell';\nimport {\n    cloneDeep,\n    computeCellClick,\n    getFlags,\n    getHidden,\n    getMines,\n    initBoardData,\n    revealBoard,\n} from './mine-sweeper.utils';\nimport './minesweeper.scss';\n\ninterface MineSweeperProps {\n    height: number,\n    width: number\n    mines: number\n}\n\n\nexport const Board = memo<MineSweeperProps>(({ mines, height, width }) => {\n    const [boardData, setBoardData] = useState<CellValue[][]>(() => initBoardData(height, width, mines));\n    const [mineCount, setMineCount] = useState<number>(mines);\n    const [won, setWon] = useState<boolean>(false);\n\n    useEffect(() => {\n        setBoardData(initBoardData(height, width, mines));\n    }, [height, width, mines]);\n\n    const handleContextMenu = useCallback((x: number, y: number) => {\n        let newMineCount = mineCount;\n        let win = false;\n\n        // check if already revealed\n        if (boardData[x][y].isRevealed) {\n            return;\n        }\n        const updatedData = cloneDeep(boardData);\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            newMineCount++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            newMineCount--;\n        }\n\n        if (newMineCount === 0) {\n            const mineArray = getMines(updatedData);\n            const FlagArray = getFlags(updatedData);\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\n            if (win) {\n                setBoardData(revealBoard(updatedData));\n                alert('You Win');\n            }\n        }\n\n        setBoardData(updatedData);\n        setMineCount(getMines(updatedData).length);\n        setWon(win);\n    }, [boardData, mineCount]);\n\n    const handleClick = useCallback((x, y) => {\n        if (boardData[x][y].isRevealed) {\n            return;\n        }\n        if (boardData[x][y].isMine) {\n            alert('game over');\n        }\n        const updatedData = computeCellClick(boardData, x, y, mines);\n\n        if (getHidden(updatedData).length === mines) {\n            setWon(true);\n            alert('You Win');\n        }\n        setBoardData(updatedData);\n        setMineCount(mines - getFlags(updatedData).length);\n    }, [boardData, mines]);\n\n\n    return (\n        <div className=\"board\">\n            <BoardItemList\n                data={boardData}\n                onContextMenu={handleContextMenu}\n                onClick={handleClick}\n            />\n        </div>\n    );\n});\n\n\ninterface BoardItemListProps extends CellClickHandler {\n    data: CellValue[][],\n}\n\nexport const BoardItemList = memo<BoardItemListProps>(({ data, onContextMenu, onClick }) => {\n    return (\n        <>\n            {data.map((dataRow, x) => (\n                <div key={'row-' + x * dataRow.length}>\n                    {\n                        dataRow.map((dataItem) => (\n                            <div key={'Cell-' + dataItem.x * dataRow.length + dataItem.y}>\n                                <Cell\n                                    onClick={onClick}\n                                    onContextMenu={onContextMenu}\n                                    value={dataItem}\n                                />\n                                {(dataRow[dataRow.length - 1] === dataItem) ? <div className=\"clear\" /> : ''}\n                            </div>\n                        ))\n                    }\n                </div>\n            ))}\n        </>\n    );\n});\n","import { FormEvent, useCallback } from 'react';\nimport { Board } from './board';\n\nexport function MineSweeperFC() {\n    const handleSubmit = useCallback((e: FormEvent) => {\n        e.preventDefault();\n    }, []);\n\n    return (\n        <>\n            <h1>Mine Sweeper</h1>\n            <h3>Initial source: https://github.com/saninmersion/react-minesweeper</h3>\n            <form\n                onSubmit={handleSubmit}\n            >\n\n                <Board height={10} width={10} mines={10} />\n                <button>Submit</button>\n            </form>\n        </>\n    );\n\n}\n","import React, { memo, useCallback, useEffect } from 'react';\nimport { BoardItemList } from '../minesweeper-refactored/board';\nimport {\n    actionFlagCell,\n    actionInitiateBoard,\n    actionRevealCell,\n    GameStatus,\n    useCreateMineSweeperStore,\n} from './mine-sweeper.store';\nimport './minesweeper.scss';\n\ninterface MineSweeperProps {\n    height: number,\n    width: number\n    mines: number\n}\n\n\nexport const Board = memo<MineSweeperProps>(({ mines: minesProp, height, width }) => {\n    const useStore = useCreateMineSweeperStore();\n\n    const { boardData, status } = useStore();\n    useEffect(() => {\n        actionInitiateBoard(useStore, width, height, minesProp);\n    }, [height, minesProp, useStore, width]);\n\n    const handleContextMenu = useCallback((x: number, y: number) => {\n        actionFlagCell(useStore, x, y);\n    }, [useStore]);\n\n    const handleClick = useCallback((x, y) => {\n        actionRevealCell(useStore, x, y);\n    }, [useStore]);\n\n    useEffect(() => {\n        if (status === GameStatus.won) {\n            alert('You Win');\n        } else if (status === GameStatus.lose) {\n            alert('You Loose');\n        }\n    }, [status]);\n\n    return (\n        <div className=\"board\">\n            <BoardItemList\n                data={boardData}\n                onContextMenu={handleContextMenu}\n                onClick={handleClick}\n            />\n        </div>\n    );\n});\n","import { FormEvent, useCallback } from 'react';\nimport { Board } from './board';\n\nexport function MineSweeperZustand() {\n    const handleSubmit = useCallback((e: FormEvent) => {\n        e.preventDefault();\n    }, []);\n\n    return (\n        <>\n            <h1>Mine Sweeper Zustand</h1>\n            <h3>Initial source: https://github.com/saninmersion/react-minesweeper</h3>\n            <form\n                onSubmit={handleSubmit}\n            >\n\n                <Board height={10} width={10} mines={10} />\n                <button>Submit</button>\n            </form>\n        </>\n    );\n\n}\n","import React, { MouseEventHandler } from 'react';\n\ninterface CellProps {\n    value: any;\n    onClick: MouseEventHandler<HTMLDivElement>;\n    cMenu: MouseEventHandler<HTMLDivElement>;\n}\n\nexport class Cell extends React.Component<CellProps> {\n\n    getValue() {\n        if (!this.props.value.isRevealed) {\n            return this.props.value.isFlagged ? '🚩' : null;\n        }\n        if (this.props.value.isMine) {\n            return '💣';\n        }\n        if (this.props.value.neighbour === 0) {\n            return null;\n        }\n        return this.props.value.neighbour;\n    }\n\n    render() {\n        let className = 'cell' + (this.props.value.isRevealed ? '' : ' hidden') + (this.props.value.isMine ? ' is-mine' : '') + (this.props.value.isFlagged ? ' is-flag' : '');\n\n\n        return (\n            <div ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu}>\n                {this.getValue()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Cell } from './cell';\nimport './minesweeper.scss';\n\ninterface MineSweeperProps {\n    height: number,\n    width: number\n    mines: number\n}\n\nexport default class Board extends React.Component<MineSweeperProps, any> {\n    state = {\n        boardData: [],\n        gameWon: false,\n        mineCount: this.props.mines,\n    };\n\n    public initGame() {\n        this.setState({\n            boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n            gameWon: false,\n            mineCount: this.props.mines,\n        });\n    }\n\n\n    getMines(data: any[]) {\n        let mineArray: any[] = [];\n\n        data.map((datarow) => {\n            datarow.map((dataItem) => {\n                if (dataItem.isMine) {\n                    mineArray.push(dataItem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    getFlags(data) {\n        let mineArray = [];\n\n        data.map((datarow) => {\n            datarow.map((dataitem) => {\n                if (dataitem.isFlagged) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Hidden cells\n    getHidden(data) {\n        let mineArray = [];\n\n        data.forEach((datarow) => {\n            datarow.forEach((dataitem) => {\n                if (!dataitem.isRevealed) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get random number given a dimension\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n    }\n\n    // Gets initial board data\n    initBoardData(height: number, width: number, mines: number) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                };\n            }\n        }\n        data = this.plantMines(data, height, width, mines);\n        data = this.getNeighbours(data, height, width);\n        console.log(data);\n        return data;\n    }\n\n    // plant mines on the board\n    plantMines(data, height, width, mines) {\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < mines) {\n            randomx = this.getRandomNumber(width);\n            randomy = this.getRandomNumber(height);\n            if (!(data[randomx][randomy].isMine)) {\n                data[randomx][randomy].isMine = true;\n                minesPlanted++;\n            }\n        }\n\n        return (data);\n    }\n\n    // get number of neighbouring mines for each board cell\n    getNeighbours(data, height, width) {\n        let updatedData = data, index = 0;\n\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (data[i][j].isMine !== true) {\n                    let mine = 0;\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n                    area.map(value => {\n                        if (value.isMine) {\n                            mine++;\n                        }\n                    });\n                    if (mine === 0) {\n                        updatedData[i][j].isEmpty = true;\n                    }\n                    updatedData[i][j].neighbour = mine;\n                }\n            }\n        }\n\n        return (updatedData);\n    };\n\n    // looks for neighbouring cells and returns them\n    traverseBoard(x, y, data) {\n        const el = [];\n\n        //up\n        if (x > 0) {\n            el.push(data[x - 1][y]);\n        }\n\n        //down\n        if (x < this.props.height - 1) {\n            el.push(data[x + 1][y]);\n        }\n\n        //left\n        if (y > 0) {\n            el.push(data[x][y - 1]);\n        }\n\n        //right\n        if (y < this.props.width - 1) {\n            el.push(data[x][y + 1]);\n        }\n\n        // top left\n        if (x > 0 && y > 0) {\n            el.push(data[x - 1][y - 1]);\n        }\n\n        // top right\n        if (x > 0 && y < this.props.width - 1) {\n            el.push(data[x - 1][y + 1]);\n        }\n\n        // bottom right\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\n            el.push(data[x + 1][y + 1]);\n        }\n\n        // bottom left\n        if (x < this.props.height - 1 && y > 0) {\n            el.push(data[x + 1][y - 1]);\n        }\n\n        return el;\n    }\n\n    // reveals the whole board\n    revealBoard() {\n        let updatedData = this.state.boardData;\n        updatedData.map((datarow) => {\n            datarow.map((dataitem) => {\n                dataitem.isRevealed = true;\n            });\n        });\n        this.setState({\n            boardData: updatedData,\n        });\n    }\n\n    /* reveal logic for empty cell */\n    revealEmpty(x, y, data) {\n        let area = this.traverseBoard(x, y, data);\n        area.map(value => {\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\n                data[value.x][value.y].isRevealed = true;\n                if (value.isEmpty) {\n                    this.revealEmpty(value.x, value.y, data);\n                }\n            }\n        });\n        return data;\n\n    }\n\n    // Handle User Events\n\n    handleCellClick(x, y) {\n        let win = false;\n\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isRevealed) {\n            return null;\n        }\n\n        // check if mine. game over if true\n        if (this.state.boardData[x][y].isMine) {\n            this.revealBoard();\n            alert('game over');\n        }\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isFlagged = false;\n        updatedData[x][y].isRevealed = true;\n\n        if (updatedData[x][y].isEmpty) {\n            updatedData = this.revealEmpty(x, y, updatedData);\n        }\n\n        if (this.getHidden(updatedData).length === this.props.mines) {\n            win = true;\n            this.revealBoard();\n            alert('You Win');\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\n            gameWon: win,\n        });\n    }\n\n    _handleContextMenu(e, x, y) {\n        e.preventDefault();\n        let updatedData = this.state.boardData;\n        let mines = this.state.mineCount;\n        let win = false;\n\n        // check if already revealed\n        if (updatedData[x][y].isRevealed) {\n            return;\n        }\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            mines++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            mines--;\n        }\n\n        if (mines === 0) {\n            const mineArray = this.getMines(updatedData);\n            const FlagArray = this.getFlags(updatedData);\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\n            if (win) {\n                this.revealBoard();\n                alert('You Win');\n            }\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: mines,\n            gameWon: win,\n        });\n    }\n\n    renderBoard(data) {\n        return data.map((dataRow, x) => (\n            <div key={'row-' + x * dataRow.length}>\n                {dataRow.map((dataitem) => {\n                    return (\n                        <div key={dataitem.x * dataRow.length + dataitem.y}>\n                            <Cell\n                                onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n                                cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\n                                value={dataitem}\n                            />\n                            {(dataRow[dataRow.length - 1] === dataitem) ? <div className=\"clear\" /> : ''}\n                        </div>);\n                })}\n            </div>\n        ));\n\n    }\n\n    public componentWillMount() {\n        this.initGame();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\n            this.initGame();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                {this.renderBoard(this.state.boardData)}\n            </div>\n        );\n    }\n}\n","import { FormEvent, useCallback } from 'react';\nimport Board from './board';\n\nexport function MineSweeper() {\n\n    const handleSubmit = useCallback((e: FormEvent) => {\n        e.preventDefault();\n    }, []);\n\n    return (\n        <>\n            <h1>Mine Sweeper</h1>\n            <h3>Source: https://github.com/saninmersion/react-minesweeper</h3>\n            <form\n                onSubmit={handleSubmit}\n\n            >\n\n                <Board height={10} width={10} mines={10}/>\n\n                <button>Submit</button>\n            </form>\n        </>\n    );\n\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { CounterReduxToolkit } from './features/counter/counter-redux-toolkit/Counter';\nimport { CounterRedux } from './features/counter/counter-redux/Counter';\nimport { CounterZustand } from './features/counter/counter-zustand/Counter';\nimport { Dogs } from './features/dogs/dogs';\nimport { MineSweeperFC } from './features/mine-sweeper/minesweeper-refactored/mine-sweeper';\nimport { MineSweeperZustand } from './features/mine-sweeper/minesweeper-zustand/mine-sweeper';\nimport { MineSweeper } from './features/mine-sweeper/minesweeper/mine-sweeper';\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/counter-redux\">Redux</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/counter-redux-toolkit\">Redux toolkit</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/counter-zustand\">Zustand</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/MineSweeper\">MineSweeper</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/MineSweeperFC\">MineSweeperFC</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/MineSweeperZustand\">MineSweeperZustand</Link>\n                        </li>\n                        {/*<li>*/}\n                        {/*    <Link to=\"/Dogs\">Dog breed list</Link>*/}\n                        {/*</li>*/}\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route path=\"/counter-redux\" exact component={CounterRedux} />\n                    <Route path=\"/counter-redux-toolkit\" exact component={CounterReduxToolkit} />\n                    <Route path=\"/counter-zustand\" exact component={CounterZustand} />\n                    <Route path=\"/MineSweeper\" exact component={MineSweeper} />\n                    <Route path=\"/MineSweeperFC\" exact component={MineSweeperFC} />\n                    <Route path=\"/MineSweeperZustand\" exact component={MineSweeperZustand} />\n                    <Route path=\"/Dogs\" exact component={Dogs} />\n                    <Route exact path=\"/\">\n                        <h1>Redux vs Zustand and Class vs Functional</h1>\n                        <br /><br />\n                        <h3>\n                            <a href=\"https://docs.google.com/presentation/d/1DPToqqTVP0_Xernw2U8KfQTudcH_IcyDWrm4JPJH8YQ/edit?usp=sharing\">\n                                Slides\n                            </a>\n                        </h3>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { counterToolkitReducer } from '../features/counter/counter-redux-toolkit/counter.store';\nimport { CounterSimpleReducer } from '../features/counter/counter-redux/counter.store';\nimport { AppState } from './app-state';\n\n\nexport const store = configureStore<AppState>({\n    reducer: {\n        counterSimple: CounterSimpleReducer,\n        counterToolkit: counterToolkitReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1Hobq\",\"value\":\"Counter_value__1pG73\",\"button\":\"Counter_button__RT-mZ\",\"textbox\":\"Counter_textbox__1TR8g\",\"asyncButton\":\"Counter_asyncButton__3g_II Counter_button__RT-mZ\"};"],"sourceRoot":""}